#!/usr/bin/env python3
import json
import matplotlib.pyplot as plt
import numpy as np
import argparse
import os

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Plot relaxation times that "
                                     "have been generated by Phoebe, separated by bands.")
    parser.add_argument("INPUT",
                        help="Name of the JSON file with relaxation times")
    parser.add_argument("calcIndex",
                        help="Index of temperature/chemical potential to plot",
                        default=0)
    args = parser.parse_args()

    # load in the json output
    jfileName = args.INPUT
    with open(jfileName) as jfile:
        data = json.load(jfile)

        # some relaxation times may be None (e.g. acoustic phonon modes at Gamma)
        # we replace that with 0, in order to be plotted
        try:
            data['relaxationTimes'] =[ [ [ 0. if x==None else x for x in y]
                                         for y in z ]
                                       for z in data['relaxationTimes'] ]
        except KeyError:
            raise KeyError("relaxation times not found."
                           "Are you using the correct input json file?")

    # unpack the json file
    tau = np.array(data['relaxationTimes'])    # dimensions (iCalc, ik, ib)
    energies = np.array(data['energies'])      # dimensions (iCalc, ik, ib)
    if len(energies.shape) == 2:
        print("Unfortunately, this script only makes sense with full band structures.")
        print("It looks like you're trying to use it with an window-reduced bandstructure.")
        exit()
    nbands = energies.shape[2]
    mu = np.array(data['chemicalPotentials'])
    T = np.array(data['temperatures'])
    particleType = data['particleType']

    # for now, let's select one calculation
    # the index used to select the calculation
    # also corresponds to the index for the temperature
    # and chemical potential of that calculation as stored
    # in those arrays.
    calcIndex = int(args.calcIndex)
    energies = energies[calcIndex]
    tau = tau[calcIndex]
    mu = mu[calcIndex]
    print("Calculation Temperature: ", T[calcIndex])

    # plot the lifetimes, colored by band, for all dimensions
    plt.figure(figsize=(5,5))
    colors = plt.get_cmap('winter')(np.linspace(0,1,nbands))
    for ib in range(nbands):
        plt.scatter(energies[:,ib] - mu, tau[:,ib], marker='x',
                    s=18, alpha=0.25, color=colors[ib])

    # plot aesthetics
    plt.yscale('log')
    plt.xlabel(r'Energy [' + data['energyUnit'] +']',fontsize=12)
    plt.ylabel(r'$\tau_{' + data['particleType'] + '}$ [' +
               data['relaxationTimeUnit'] + ']',fontsize=12)

    if (particleType == "phonon"):
        plt.xlim(0,None)

    # Find limits of the y axis
    flattenedTau = tau.flatten()
    zeroIndex = np.argwhere(flattenedTau==0.)
    flattenedTau = np.delete(flattenedTau, zeroIndex)
    ymin = 10**np.floor(np.log10(np.min(flattenedTau)))
    ymax = 10**np.ceil(np.log10(np.max(flattenedTau)))
    plt.ylim(ymin, ymax)

    # plt.colorbar()

    plt.tight_layout()

    plotFileName = os.path.splitext(jfileName)[0] + ".pdf"
    plt.savefig(plotFileName)
    plt.show(block=False)

